#!/usr/bin/env bash

set -o pipefail

git-fzf-branch () {
    git branch --format '%(refname:short)' --list "$@" \
        | grep -v '(HEAD detached at' \
        | fzf --ansi --exit-0
}

git-fzf-checkout () {
    local branch="$(git-fzf-branch)"
    [[ -z "$branch" ]] && return 1
    git checkout "$branch"
}

git-fzf-merge () {
    local branch="$(git-fzf-branch)"
    [[ -z "$branch" ]] && return 1
    git merge "$@" "$branch"
}

git-fzf-log () {
    local format='%C(auto)%h%Creset  %s  %C(black)(%ai)%Creset'
    git log --color=always --reverse --pretty=format:"$format" \
        | fzf --ansi --tac --preview 'git show --color=always {1}' \
        | cut -f1 -d' '
}

git-fzf-fixup () {
    local commit="$(git-fzf-log)"
    [[ -z "$commit" ]] && return 1
    git commit --fixup "$commit" "$@"
}

git-fzf-cherry-pick () {
    local commit="$(git-fzf-log)"
    [[ -z "$commit" ]] && return 1
    git cherry-pick "$@" "$commit"
}

git-fzf-ls-files () {
    git ls-files "$@" \
        | fzf --ansi --multi --exit-0 --preview 'batcat --color=always --plain {}'
}

git-fzf-add () {
    git-fzf-ls-files --deleted --modified --others --exclude-standard "$@" \
        | xargs -r git add
}

git-fzf-show () {
    local commit="$(git-fzf-log)"
    [[ -z "$commit" ]] && return 1
    git show "$commit"
}

git-fzf-ls-remote () {
    git ls-remote "$@" \
        | cut -f2 -d$'\t' \
        | fzf --exit-0
}

git-fzf-fetch-checkout () {
    local remote_ref=$(git-fzf-ls-remote "$1")
    [[ -z "$remote_ref" ]] && return 1
    git fetch "$1" "$remote_ref" && git checkout FETCH_HEAD
}

"git-fzf-$@"

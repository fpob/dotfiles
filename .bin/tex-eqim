#!/usr/bin/env bash

#
# Original script:
#   TEX2IM (http://www.nought.de/tex2im.html)
#   Andreas Reigber <anderl@nought.de>
#   published under the GNU public licence (GPL)
#


#
# Default values
#

declare -r CONF_PATH=$HOME/.config/tex-eqim

resolution="150x150"
format="png"
color1="white"
color2="black"
trans=0
noformula=0
aa=1
extra_header="$CONF_PATH/header"

if [ -f "$CONF_PATH/config" ]; then
    source "$CONF_PATH/config"
fi

OPTERR=0

print_help () {
    cat <<EOF
Usage: "`basename $0` [options] [inputfile]

Converts LaTeX formulas to pixel graphics.

The content of input file should be _plain_ latex mathmode code!
Without inputfile argument opens \$EDITOR.
Alternatively, a string containing the latex code can be specified.

Options:
-h         show help
-a         change status of antialiasing
           default is on for normal mode and
           off for transparent mode
-o file    specifies output filename,
           default is inputfile with new extension
-f expr    specifies output format,
           possible examples: gif, jpg, tif......
           all formates supported by "convert" should work,
           default: png
-r expr    specifies desired resolution in dpi,
           possible examples: 100x100, 300x300, 200x150,
           default is 150x150
-b expr    specifies the background color
           default: white
-t expr    specifies the text color
           default: black
-n         no-formula mode (do not wrap in eqnarray* environment)
           default: off
-z         transparent background
           default: off
-x file    file containing extra header lines.
           default: $CONF_PATH/header"
EOF
}

[[ $1 == --help ]] && { print_help; exit; }

while getopts hanzb:t:f:o:r:x: Optionen; do
    case $Optionen in
        h) print_help; exit 0 ;;
        r) resolution=$OPTARG;;
        o) outfile=$OPTARG;;
        z) trans=1; aa=0;;
        a) [ $aa -eq 0 ] && aa=1 || aa=0 ;;
        n) noformula=1;;
        b) color1=$OPTARG;;
        t) color2=$OPTARG;;
        f) format=$OPTARG;;
      x) extra_header=$OPTARG;;
    esac
done

#
# Generate temporary directory
#

if test -n "`type -p mktemp`" ; then
    tmpdir="`mktemp /tmp/tex-eqim_XXXXXX`"
    rm $tmpdir
    mkdir $tmpdir
else
    tmpdir=/tmp/tex-eqim_$$
    if [ -e $tmpdir ] ; then
        echo "$0: Temporary directory $tmpdir already exists." 1>&2
        exit 1
    fi
    mkdir $tmpdir
fi
homedir="`pwd`" || exit 1

#
# Names for input and output files
#

editor_pid=
while [[ $OPTIND -le $# || $# -eq 0 ]] ; do
    [[ $editor_pid ]] && break

    if [[ $# -eq 0 ]] ; then
        infile=$tmpdir/input.tex
        $EDITOR $infile <`tty` >`tty` &editor_pid=$! || exit 1
    else
        eval infile=\$${OPTIND}
    fi

    if [ -z $outfile ]; then
        if [ -e "$infile" ]; then
            base=`basename ${infile} .tex` ;
            outfile=${base}.$format
        else
            outfile=out.$format
        fi
    fi

    if [[ $editor_pid ]] ; then
        wait $editor_pid
        [[ ! -e $infile ]] && exit
        [[ $(grep -vP '^\s*$' $infile | wc -l) -eq 0 ]] && exit
    fi

    [[ -z $infile ]] && exit 1

    #
    # Here we go
    #

    cat > $tmpdir/out.tex << ENDHEADER1
\documentclass[12pt]{article}

\usepackage{color}
\usepackage[dvips]{graphicx}

\usepackage{mathtools}
\usepackage{amsmath}
\usepackage{amsthm}

\pagestyle{empty}
ENDHEADER1

    #
    # Do we have a file containing extra files to include into the header?
    #

    if [ -f $extra_header ]; then
        cat $extra_header >> $tmpdir/out.tex
    fi

    if [ $noformula -eq 1 ]; then
        cat >> $tmpdir/out.tex << ENDHEADER2
\pagecolor{$color1}
\begin{document}
{\color{$color2}
ENDHEADER2
    else
        cat >> $tmpdir/out.tex << ENDHEADER2
\pagecolor{$color1}
\begin{document}
{\color{$color2}
\begin{eqnarray*}
ENDHEADER2
    fi

    if [ -e "$infile" ]; then
        cat $infile >> $tmpdir/out.tex
    else
        echo $infile >> $tmpdir/out.tex
    fi

    if [ $noformula -eq 1 ]; then
        cat >> $tmpdir/out.tex << ENDFOOTER
}\end{document}
ENDFOOTER
    else
        cat >> $tmpdir/out.tex << ENDFOOTER
\end{eqnarray*}}
\end{document}
ENDFOOTER
    fi

    cd $tmpdir
    for f in $homedir/*.eps; do
        test -f ${f##*/} || ln -s $f . # multi-processing!
    done
    latex -interaction=batchmode out.tex > /dev/null
    cd "$homedir"
    dvips -o $tmpdir/out.eps -E $tmpdir/out.dvi 2> /dev/null

    #
    # Transparent background
    #

    if [ $trans -eq 1 ]; then
        if [ $aa -eq 1 ]; then
            convert +adjoin -antialias -transparent $color1 -density $resolution $tmpdir/out.eps $tmpdir/out.$format
        else
            convert +adjoin +antialias -transparent $color1 -density $resolution $tmpdir/out.eps $tmpdir/out.$format
        fi
    else
        if [ $aa -eq 1 ]; then
            convert +adjoin -antialias -density $resolution $tmpdir/out.eps $tmpdir/out.$format
        else
            convert +adjoin +antialias -density $resolution $tmpdir/out.eps $tmpdir/out.$format
        fi
    fi


    if [ -e $tmpdir/out.$format ]; then
        mv $tmpdir/out.$format $outfile
    else
        mv $tmpdir/out.$format.0 $outfile
    fi

    let OPTIND=$OPTIND+1
    outfile=""
done

#
# Cleanup
#

rm -rf $tmpdir
exit 0

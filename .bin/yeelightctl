#!/usr/bin/env python3

import os

import yeelight
import click


DEFAULT_CONFIG = os.path.expanduser(os.path.join('~', '.yeelight.list'))


@click.group(chain=True)
@click.option('-l', '--bulb-list', type=click.File('r'), default=DEFAULT_CONFIG)
@click.option('-t', '--duration', type=click.IntRange(1), default=300)
@click.pass_context
def cli(ctx, bulb_list, duration):
    """Yeelight CLI controller."""
    pass


@cli.resultcallback()
def process_pipeline(action_list, bulb_list, duration):
    for addr in map(str.strip, bulb_list):
        bulb = yeelight.Bulb(addr, duration=duration)
        for action in action_list:
            action(bulb)


@cli.command()
@click.argument('state', type=click.Choice(['on', 'off']), required=False)
def toggle(state):
    """Switch on or off. Toggle if state is not specified."""
    def action(bulb):
        if state == 'on':
            bulb.turn_on()
        elif state == 'off':
            bulb.turn_off()
        else:
            bulb.toggle()
    return action


@cli.command()
@click.option('-d', '--diff', is_flag=True,
              help='Value is relative to current brightness value.')
@click.argument('value', type=int)
def bright(diff, value):
    """Change the brightness. Values are clamped to range 1 - 100."""
    def action(bulb):
        val = value  # because of reference before assignment
        if diff:
            val = int(bulb.get_properties(['bright'])['bright']) + val
        bulb.set_brightness(max(1, min(val, 100)))
    return action


@cli.command()
@click.argument('temperature', type=click.IntRange(1700, 6500))
@click.argument('brightness', type=click.IntRange(1, 100))
def ct(temperature, brightness):
    """Change the color temperature. Temperature range is 1700 - 6500 K."""
    return lambda bulb: bulb.set_scene(yeelight.SceneClass.CT,
                                       temperature, brightness)


@cli.command()
@click.argument('red', type=click.IntRange(1, 256))
@click.argument('green', type=click.IntRange(1, 256))
@click.argument('blue', type=click.IntRange(1, 256))
@click.argument('brightness', type=click.IntRange(1, 100))
def color(red, green, blue, brightness):
    """Change RGB color and brightness."""
    return lambda bulb: bulb.set_scene(yeelight.SceneClass.COLOR,
                                       red, green, blue, brightness)



if __name__ == '__main__':
    # pylint: disable=unexpected-keyword-arg,no-value-for-parameter
    cli()

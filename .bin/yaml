#!/usr/bin/env python3

import sys
import pathlib
import json

import click
import yaml


FORMAT_OPTIONS = ['sort_keys', 'sort_list']


class PrettyDumper(yaml.SafeDumper):
    """Dumps prettier YAML than default SafeDumper."""
    fmt_sort_keys = False
    fmt_sort_list = False

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.sort_list = self.fmt_sort_list

        # Disable keys sorting under Python >=3.7, keep dict order.
        # https://stackoverflow.com/a/55171433
        # https://mail.python.org/pipermail/python-dev/2017-December/151283.html
        if sys.version_info >= (3, 7):
            self.sort_keys = self.fmt_sort_keys

        # Allow unicode, don't escape as \u####.
        self.allow_unicode = True

        # Must register unbound methods there, otherwise 'self' is passed twice.
        self.add_representer(str, type(self).represent_str)
        # Represent pathlib objects as a string.
        for o in (pathlib.Path, pathlib.PosixPath, pathlib.WindowsPath):
            self.add_representer(o, type(self).represent_path)

    def represent_path(self, data):
        return self.represent_str(str(data))

    def represent_str(self, data):
        # Dump multiline strings as '|' blocks.
        if '\n' in data:
            return self.represent_scalar('tag:yaml.org,2002:str', data, style='|')
        return self.represent_scalar('tag:yaml.org,2002:str', data)

    def represent_sequence(self, tag, sequence, flow_style=None):
        if self.sort_list:
            try:
                sequence = list(sorted(sequence))
            except TypeError:  # sort not supported
                pass
        return super().represent_sequence(tag, sequence, flow_style=flow_style)

    def increase_indent(self, flow=False, indentless=False):
        # Indent block collection entries (intems starting with `-`, `?` or `:`.
        # See: https://stackoverflow.com/q/25108581
        return super().increase_indent(flow=flow, indentless=False)

    def write_plain(self, *args, **kwargs):
        # Don't put document ent marker when dumping plain scalars.
        # See: https://stackoverflow.com/q/56950391
        super().write_plain(*args, **kwargs)
        self.open_ended = False


@click.group()
def cli():
    pass


@cli.command('from-json')
@click.argument('input_file', type=click.File('r'), default='-')
@click.option('-o', '--output-file', type=click.File('w'), default='-')
@click.option('-w', '--width', type=int, default=80,
              help='Maximal line width')
@click.pass_context
def from_json(ctx, input_file, output_file, width):
    """Parse JSON file and print data as YAML."""
    try:
        data = json.load(input_file)
        output_file.write(yaml.dump(data, Dumper=PrettyDumper, width=width))
    except Exception as e:
        click.echo(e, err=True)
        ctx.exit(1)


@cli.command('to-json')
@click.argument('input_file', type=click.File('r'), default='-')
@click.option('-o', '--output-file', type=click.File('w'), default='-')
@click.option('-p', '--pretty', is_flag=True,
              help='Dump JSON indented')
@click.pass_context
def to_json(ctx, input_file, output_file, pretty):
    """Parse YAML file and print data as JSON."""
    try:
        data = yaml.load(input_file.read(), Loader=yaml.SafeLoader)
        json.dump(data, output_file, indent=2 if pretty else None)
        output_file.write('\n')  # json.dump not adds \n at the end
    except Exception as e:
        click.echo(e, err=True)
        ctx.exit(1)


@cli.command('fmt')
@click.argument('input_file', type=click.File('r'), default='-')
@click.option('-o', '--output-file', type=click.File('w'), default='-')
@click.option('-w', '--width', type=int, default=80, envvar='YAML_WIDTH',
              help='Maximal line width')
@click.option('-f', '--format-options', type=click.Choice(FORMAT_OPTIONS),
              multiple=True, envvar='YAML_FORMAT_OPTIONS')
@click.pass_context
def fmt(ctx, input_file, output_file, width, format_options):
    for k in format_options:
        setattr(PrettyDumper, f'fmt_{k}', True)

    try:
        data = yaml.load(input_file.read(), Loader=yaml.SafeLoader)
        output_file.write(yaml.dump(data, Dumper=PrettyDumper, width=width))
    except Exception as e:
        click.echo(e, err=True)
        ctx.exit(1)


if __name__ == '__main__':
    prog = pathlib.Path(sys.argv[0]).name
    if prog == 'yaml-json':
        to_json()
    elif prog == 'json-yaml':
        from_json()
    else:
        cli()

#!/usr/bin/env python3

import sys

import click
import yaml
import json


class PrettyDumper(yaml.SafeDumper):
    """Dumps prettier YAML than default SafeDumper."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Disable keys sorting under Python >=3.7, keep dict order.
        # https://stackoverflow.com/a/55171433
        # https://mail.python.org/pipermail/python-dev/2017-December/151283.html
        if sys.version_info >= (3, 7):
            self.sort_keys = False

        # Allow unicode, don't escape as \u####.
        self.allow_unicode = True

        # Must register unbound methods there, otherwise 'self' is passed twice.
        self.add_representer(str, type(self).represent_str)
        # Represent pathlib objects as a string.
        for o in (pathlib.Path, pathlib.PosixPath, pathlib.WindowsPath):
            self.add_representer(o, type(self).represent_path)

    def represent_path(self, data):
        return self.represent_str(str(data))

    def represent_str(self, data):
        # Dump multiline strings as '|' blocks.
        if '\n' in data:
            return self.represent_scalar('tag:yaml.org,2002:str', data, style='|')
        return self.represent_scalar('tag:yaml.org,2002:str', data)

    def increase_indent(self, flow=False, indentless=False):
        # Indent block collection entries (intems starting with `-`, `?` or `:`.
        # See: https://stackoverflow.com/q/25108581
        return super().increase_indent(flow=flow, indentless=False)

    def write_plain(self, *args, **kwargs):
        # Don't put document ent marker when dumping plain scalars.
        # See: https://stackoverflow.com/q/56950391
        super().write_plain(*args, **kwargs)
        self.open_ended = False


@click.command()
@click.argument('input_file', type=click.File('r'), default='-')
@click.option('-o', '--output-file', type=click.File('w'), default='-')
@click.option('-w', '--width', type=int, default=80,
              help='Maximal line width')
@click.pass_context
def cli(ctx, input_file, output_file, width):
    """Parse JSON file and print data as YAML."""
    try:
        data = json.load(input_file)
        output_file.write(yaml.dump(data, Dumper=PrettyDumper, width=width))
    except Exception as e:
        click.echo(e, err=True)
        ctx.exit(1)


if __name__ == '__main__':
    # pylint: disable=unexpected-keyword-arg,no-value-for-parameter
    cli()

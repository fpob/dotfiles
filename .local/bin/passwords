#!/usr/bin/env python3

import gi
import click
import time

gi.require_version('GLib', '2.0')
from gi.repository import GLib

gi.require_version('GnomeKeyring', '1.0')
from gi.repository import GnomeKeyring as gk


GLib.set_application_name('GnomeKeyringCli')


def abort_if_false(ctx, param, value):
    if not value:
        ctx.abort()


@click.group()
@click.option('-k', '--keyring', default='Passwords', help="Keyring name")
@click.pass_context
def passwords(ctx, keyring):
    """Simple password manager."""
    result, keyrings_list = gk.list_keyring_names_sync()
    if result == gk.Result.NO_KEYRING_DAEMON:
        click.echo('Keyring daemon is not available.', err=True)
        ctx.exit(2)
    if result != gk.Result.OK:
        click.echo('Unknown error', err=True)
        ctx.exit(2)
    if ctx.invoked_subcommand == "set":
        # Create keyring if not exists
        if keyring not in keyrings_list:
            create_result = gk.create_sync(keyring)
            if create_result != gk.Result.OK:
                click.echo('Cant create keyring „%s“!' % keyring, err=True)
                ctx.exit(1)
    ctx.obj['KEYRING'] = keyring

@passwords.command('set')
@click.argument('identifier')
@click.option('-p', '--password', prompt=True, confirmation_prompt=True, hide_input=True)
@click.pass_context
def passwords_set(ctx, identifier, password):
    attrs = gk.Attribute.list_new()
    gk.Attribute.list_append_string(attrs, 'identifier', identifier)
    result, item_id = gk.item_create_sync(ctx.obj['KEYRING'], gk.ItemType.GENERIC_SECRET, identifier, attrs, password, True)
    if result != gk.Result.OK:
        ctx.exit(1)

@passwords.command('get')
@click.argument('identifier')
@click.pass_context
def passwords_get(ctx, identifier):
    result, items_ids = gk.list_item_ids_sync(ctx.obj['KEYRING'])
    if result != gk.Result.OK:
        ctx.exit(1)
    for item_id in items_ids:
        item_result, item_info = gk.item_get_info_sync(ctx.obj['KEYRING'], item_id)
        if identifier == item_info.get_display_name():
            click.echo(item_info.get_secret())
            break
    else:
        ctx.exit(1)

@passwords.command('del')
@click.argument('identifier')
@click.option('--yes', is_flag=True, callback=abort_if_false, expose_value=False,
              prompt='Are you sure you want to delete password?')
@click.pass_context
def passwords_del(ctx, identifier):
    result, items_ids = gk.list_item_ids_sync(ctx.obj['KEYRING'])
    for item_id in items_ids:
        item_result, item_info = gk.item_get_info_sync(ctx.obj['KEYRING'], item_id)
        if identifier == item_info.get_display_name():
            gk.item_delete_sync(ctx.obj['KEYRING'], item_id)
            break
    else:
        ctx.exit(1)

@passwords.command('list')
@click.pass_context
def passwords_list(ctx):
    result, items_ids = gk.list_item_ids_sync(ctx.obj['KEYRING'])
    for item_id in items_ids:
        item_result, item_info = gk.item_get_info_sync(ctx.obj['KEYRING'], item_id)
        print(item_info)
        click.echo(item_info.get_display_name())


if __name__ == "__main__":
    passwords(obj={})

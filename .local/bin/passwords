#!/usr/bin/env python3

import gi
import click
import time

gi.require_version('GLib', '2.0')
from gi.repository import GLib

gi.require_version('Secret', '1')
from gi.repository import Secret

GLib.set_application_name('PasswordsCli')


class KeyringItem(click.ParamType):
    name = 'item'

    def convert(self, value, param, ctx):
        for item in ctx.obj['collection'].get_items():
            if item.get_label() == value:
                return item
        else:
            self.fail('Item not found')

def abort_if_false(ctx, param, value):
    if not value:
        ctx.abort()


@click.group()
@click.option('-k', '--keyring', default='Passwords',
              help='Keyring name')
@click.option('-c', '--create', is_flag=True, default=False,
              help='Create keyring if not exists')
@click.pass_context
def passwords(ctx, keyring, create):
    """
    Simple password manager / Secret Service client.
    """
    service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)
    collection = None

    for collection in service.get_collections():
        if collection.get_label() == keyring:
            break
    else:
        collection = None

    if not collection:
        if create:
            flags = Secret.CollectionCreateFlags.COLLECTION_CREATE_NONE
            collection = Secret.Collection.create_sync(
                service, keyring, None, flags)
        else:
            click.echo('Keyring "%s" not exists' % keyring, err=True)
            ctx.exit(1)

    if collection.get_locked():
        result, unlocked = service.unlock_sync([collection])
        if result:
            collection = unlocked.pop()
        else:
            click.echo('Cannot unlock keyring "%s"' % keyring, err=True)
            ctx.exit(1)

    if not collection.load_items_sync():
        click.echo('Cannot load items', err=True)
        ctx.exit(1)

    ctx.obj['service'] = service
    ctx.obj['collection'] = collection

@passwords.command('list')
@click.option('-a', '--attrs', is_flag=True, default=False,
              help='Show attributes')
@click.pass_context
def passwords_list(ctx, attrs):
    for item in ctx.obj['collection'].get_items():
        click.secho(item.get_label(), bold=attrs)
        if attrs:
            click.echo('  Modified: %s' % time.strftime(
                '%Y-%m-%d %H:%M:%S', time.localtime(item.get_modified())))
            click.echo('  Attributes:')
            attributes = item.get_attributes()
            for attr in sorted(attributes):
                click.echo('    {}: {}'.format(attr, attributes[attr]))
            click.echo()

@passwords.command('get')
@click.argument('item', type=KeyringItem())
@click.pass_context
def passwords_get(ctx, item):
    secret = item.load_secret_sync() and item.get_secret()
    if not secret:
        click.echo('Cannot load secret', err=True)
        ctx.exit(1)
    click.echo(secret.get_text())

@passwords.command('get-attr')
@click.argument('item', type=KeyringItem())
@click.argument('attr')
@click.pass_context
def passwords_get_attr(ctx, item, attr):
    attributes = item.get_attributes()
    if attr in attributes:
        click.echo(attributes[attr])

@passwords.command('set')
@click.argument('label', metavar='ITEM')
@click.option('-s', '--secret', prompt=True, confirmation_prompt=True,
              hide_input=True)
@click.pass_context
def passwords_set(ctx, label, secret):
    secret = Secret.Value.new(secret, len(secret), 'text/plain')
    error = False

    for item in ctx.obj['collection'].get_items():
        if item.get_label() == label:
            error = not item.set_secret_sync(secret)
            break
    else:
        item = Secret.Item.create_sync(ctx.obj['collection'], None, {}, label,
                                       secret, Secret.ItemCreateFlags.NONE)
        error = not item

    if error:
        click.echo('Cannot modify secret', err=True)
        ctx.exit(1)

@passwords.command('set-attr')
@click.argument('item', type=KeyringItem())
@click.argument('attr')
@click.argument('value')
@click.pass_context
def passwords_set_attr(ctx, item, attr, value):
    attributes = item.get_attributes()
    attributes[attr] = value
    if not item.set_attributes_sync(None, attributes):
        click.echo('Cannot modify attributes', err=True)
        ctx.exit(1)

@passwords.command('del')
@click.argument('item', type=KeyringItem())
@click.option('--yes', is_flag=True, callback=abort_if_false,
              expose_value=False,
              prompt='Are you sure you want to delete password?')
@click.pass_context
def passwords_del(ctx, item):
    if not item.delete_sync():
        click.echo('Cannot delete item', err=True)
        ctx.exit(1)

@passwords.command('del-attr')
@click.argument('item')
@click.argument('attr')
@click.pass_context
def passwords_del_attr(ctx, item, attr):
    attributes = item.get_attributes()
    if attr in attributes:
        del attributes[attr]
    if not item.set_attributes_sync(None, attributes):
        click.echo('Cannot modify attributes', err=True)
        ctx.exit(1)


if __name__ == "__main__":
    passwords(obj={})

snippet from "from ... import ..." b
from ${1:module} import ${2:symbol}
$0
endsnippet

snippet "" "docstring"
"""
${VISUAL}$0
"""
endsnippet

snippet ""\ "docstring \"
"""\
${VISUAL}$0
"""
endsnippet

snippet if "if ..." b
if ${1:condition}:
	${VISUAL}$0
endsnippet

snippet else "else" b
else:
	${VISUAL}$0
endsnippet

snippet elif "elif ..." b
elif ${1:condition}:
	${VISUAL}$0
endsnippet

snippet while "while ..." b
while ${1:condition}:
	${VISUAL}$0
endsnippet

snippet for "for ... in ..." b
for ${1:i} in ${2:items}:
	${VISUAL}$0
endsnippet

snippet for "for ... in range ..." b
for ${1:i} in range(${2:items}):
	${VISUAL}$0
endsnippet

snippet with "with ..." b
with ${1:with_item}:
	${VISUAL}$0
endsnippet

snippet withf "with open(...) as f" b
with open(${1:with_item}) as f:
	${VISUAL}$0
endsnippet

snippet match "pattern matching" b
match ${1:expr}:
	case ${2:_}:
		$0
endsnippet

snippet case "pattern matching case" b
case ${1:_}:
	$0
endsnippet

snippet def "def ...(...)" b
def ${1:fname}(${2}):
	$0
endsnippet

snippet inner "inner decorator function" b
def ${1:inner}(${2}):
	$0
return $1
endsnippet

snippet la "lambda ...: ..." b
lambda ${1}: $0
endsnippet

snippet try "try: ... except: ..." b
try:
	${VISUAL}${1}
except ${2:Exception} as ${3:e}:
	${4:...}
endsnippet

snippet fin "finally" b
finally:
	${VISUAL}$0
endsnippet

snippet sup "contextlib.suppress" b
with contextlib.suppress(${1:Exception}):
	${VISUAL}$0
endsnippet

snippet . "self" i
self.$0
endsnippet

snippet cl "class ..." b
class ${1:ClassName}:
	$0
endsnippet

snippet prop "property" b
@property
def ${1:foo}(self):
	${2:return self._$1}$0
endsnippet

snippet props "property.setter" b
@$1.setter
def ${1:foo}(self, value):
	${2:self._$1 = value}$0
endsnippet

snippet propd "property.deleter" b
@$1.deleter
def ${1:foo}(self):
	${2:del self._x}$0
endsnippet

snippet _ "magic" i
__${1:init}__$0
endsnippet

snippet ifm "if main" b
if __name__ == '__main__':
	${VISUAL}$0
endsnippet

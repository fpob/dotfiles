snippet pack "package" b
package ${1:main}$0
endsnippet

snippet imp "import factored" b
import (
	$0
)
endsnippet

snippet var "var factored" b
var (
	$0
)
endsnippet

snippet const "const factored" b
const (
	$0
)
endsnippet

snippet main "func main()" b
func main() {
	$0
}
endsnippet

snippet init "func init()" b
func init() {
	$0
}
endsnippet

snippet if "if ..." b
if ${1:/* condition */} {
	${VISUAL}$0
}
endsnippet

snippet elif "else if ..."
else if ${1:/* condition */} {
	${VISUAL}$0
}
endsnippet

snippet else "else"
else {
	${VISUAL}$0
}
endsnippet

snippet for "for ..." b
for ${1} {
	${VISUAL}$0
}
endsnippet

snippet fori "for i = 0..." b
for ${1:i} := 0; $1 < ${2:count}; $1++ {
	${VISUAL}$0
}
endsnippet

snippet fore "foreach" b
for ${1:item} := range ${2:array} {
	${VISUAL}$0
}
endsnippet

snippet switch "switch ..." b
switch ${1} {
	$0
}
endsnippet

snippet select "select" b
select {
	$0
}
endsnippet

snippet case "case ..." b
case ${1}:
	$0
endsnippet

snippet default "default" b
default:
	$0
endsnippet

snippet struct "type ... struct" b
type ${1:name} struct {
	$0
}
endsnippet

snippet iface "type ... interface" b
type ${1:name} interface {
	$0
}
endsnippet

snippet func "function/closure"
func ${1:functionName}(${2}) ${3} {
	$0
}
endsnippet

snippet funcs "function on structure" b
func (${1}) ${2:functionName}(${3}) ${4} {
	$0
}
endsnippet

snippet mc "make chan"
make(chan ${1})$0
endsnippet

snippet go "go anonymous func"
go func() {
	${VISUAL}$0
}()
endsnippet

global !p
import os
def class_name(fn):
	return os.path.splitext(fn)[0]
endglobal


snippet if "Condition" b
if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet else "Condition else" b
else {
	${VISUAL}$0
}
endsnippet

snippet elseif "Condition elseif" b
elseif (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet for "For loop"
for (\$${2:i} = 0; \$$2 < ${1:count}; \$$2${3:++}) {
	${VISUAL}$0
}
endsnippet

snippet foreach
foreach (\$${1:variable} as \$${2:key}) {
	${VISUAL}$0
}
endsnippet

snippet while "While loop" b
while (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet do "Do loop" b
do {
	${VISUAL}$0
} while (${1:/* condition */});
endsnippet

snippet switch "Switch" b
switch (\$${1:variable}) {
	case '${2:value}':
		${3:// code...}
		break;
	$0
	default:
		${4:// code...}
		break;
}
endsnippet

snippet case "Switch case" b
case '${1:value}':
	${2:// code...}
	break;
endsnippet

snippet array "Array variable" b
\$${1:arrayName} = ['${2}' => ${3}];$0
endsnippet

snippet . "this" i
$this->$0
endsnippet

snippet class "Class" b
/**
 * ${3:undocumented class}
 *
 * @author ${4:`!v g:snips_author`}
 */
${1:}class ${2:`!p snip.rv = class_name(fn)`}
{
	$0
}
endsnippet

snippet iface "Interface" b
/**
 * ${3:undocumented interface}
 *
 * @author ${4:`!v g:snips_author`}
 */
interface ${2:`!p snip.rv = class_name(fn)`}
{
	$0
}
endsnippet

snippet var "Class property" b
/** @var ${3:string} */
${1:private} \$${2};$0
endsnippet

snippet fun "Class method" b
${1:public} function ${2:functionName}(${3}) {
	$0
}
endsnippet

snippet ifun "Interface method" b
${1:public} function ${2:functionName}(${3});
endsnippet

snippet afun "Abstract method" b
abstract ${1:public} function ${2:functionName}(${3});
endsnippet

snippet get "Getter" b
public function get${1:Property}() {
	return \$this->${1/\w/\l$0/};
}
endsnippet

snippet is "Getter (bool)" b
public function is${1:Property}() {
	return \$this->${1/\w/\l$0/};
}
endsnippet

snippet set "Setter" b
public function set${1:Property}(\$${1/\w/\l$0/}) {
	\$this->${1/\w/\l$0/} = \$${1/\w/\l$0/};
	return \$this;
}
endsnippet

snippet getset "Getter & Setter" bm
public function get${1:Property}() {
	return \$this->${1/\w/\l$0/};
}

public function set$1(\$${1/\w/\l$0/}) {
	\$this->${1/\w/\l$0/} = \$${1/\w/\l$0/};
	return \$this;
}
endsnippet

snippet isset "Getter (bool) & Setter" bm
public function is${1:Property}() {
	return \$this->${1/\w/\l$0/};
}

public function set$1(\$${1/\w/\l$0/}) {
	\$this->${1/\w/\l$0/} = \$${1/\w/\l$0/};
	return \$this;
}
endsnippet

snippet __c "Constructor" b
${1:public} function __construct(${2}) {
	${3:parent::__construct(}$0
}
endsnippet

snippet u "Use" b
use ${1};
endsnippet

snippet cb "Callback" w
[\$this, '${1}']
endsnippet

snippet sep
/* ******************** ${1} ******************** */$0
endsnippet

global !p
import os
def class_name(fn, suffix=""):
	return os.path.splitext(fn)[0]
def str_repr(s):
	return repr(s).lstrip('u')
endglobal

snippet bd "Debugger barDump" i
\\Tracy\\Debugger::barDump(${1});
endsnippet

# Debugger.barDump with title
snippet bdt "Debugger barDump" i
\\Tracy\\Debugger::barDump(${1}, `!p snip.rv = str_repr(t[1])`);
endsnippet

# Presenter
snippet presenter "Base presenter" b
namespace App\\${1:Presenters};

use Nette;
use App;


/**
 * ${5:undocumented presenter}
 *
 * @author `!v g:snips_author`
 */
${2:abstract }class ${3:`!p snip.rv = class_name(fn, "Presenter")`} extends ${4:Nette\\Application\\UI\Presenter}
{
	$0
}
endsnippet

snippet presenter "Application presenter" b
namespace App\\${1:Presenters};

use Nette;
use App;


/**
 * ${5:undocumented presenter}
 *
 * @author `!v g:snips_author`
 */
${2:}class ${3:`!p snip.rv = class_name(fn, "Presenter")`} extends ${4:BasePresenter}
{
	$0
}
endsnippet

snippet presenter "Application presenter in module"
namespace App\\${1:Module}\\${2:Presenters};

use Nette;
use App;


/**
 * ${6:undocumented presenter}
 *
 * @author `!v g:snips_author`
 */
${3:}class ${4:`!p snip.rv = class_name(fn, "Presenter")`} extends ${5:BasePresenter}
{
	$0
}
endsnippet

# Component/Control
snippet control
namespace ${1:App\\Components};

use Nette;
use App;


/**
 * ${5:undocumented component}
 *
 * @author `!v g:snips_author`
 */
${2:}class ${3:`!p snip.rv = class_name(fn, "Control")`} extends ${4:Nette\\Application\\UI\\Control}
{
	$0
}
endsnippet

# Model
snippet model "Nette\Object"
namespace ${1:App\\Model};

use Nette;


/**
 * ${5:undocumented class}
 *
 * @author `!v g:snips_author`
 */
${2:}class ${3:`!p snip.rv = class_name(fn)`} extends ${4:Nette\\Object}
{
	$0
}
endsnippet

snippet model "Nette\SmartObject"
namespace ${1:App\\Model};

use Nette;


/**
 * ${5:undocumented class}
 *
 * @author `!v g:snips_author`
 */
${2:}class ${3:`!p snip.rv = class_name(fn)`}
{
	use Nette\SmartObject;
	$0
}
endsnippet

# Field @inject
snippet @i
/** @var ${1:Type} @inject */
public \$${2:name};
$0
endsnippet

# injectFoo
snippet inj
public function inject${1:Service}(${2:Type} \$${3:var}) {
	\$this->${4:${1/\w/\l$0/}} = \$$3;
}
endsnippet

# Presenter.startup
snippet sta
protected function startup() {
	parent::startup();
	$0
}
endsnippet

# Presenter.actionFoo
snippet act
public function action${1:Default}(${2}) {
	$0
}
endsnippet

# Presetner.handleFoo
snippet han
public function handle${1:Default}(${2}) {
	$0
}
endsnippet

# Presenter.beforeRender
snippet bef
protected function beforeRender() {
	parent::beforeRender();
	$0
}
endsnippet

# Presenter.renderFoo
snippet ren
public function render${1:Default}(${2}) {
	$0
}
endsnippet

# Presenter.afterRender
snippet aft
protected function afterRender() {
	parent::afterRender();
	$0
}
endsnippet

# Presenter.shutdown
snippet shu
protected function shutdown($response) {
	parent::shutdown();
	$0
}
endsnippet

# createComponentFoo
snippet cc
protected function createComponent${1:Name}() {
	$0
}
endsnippet

# createComponentFoo: Form
snippet ccf
protected function createComponent${1:Name}Form() {
	\$form = new ${2:Nette\\Application\\UI\\Form};

	$0

	return \$form;
}
endsnippet

# createComponentFoo: Multiplier
snippet ccm
protected function createComponent${1:Name}() {
	return new Nette\\Application\\UI\\Multiplier(function(\$name) {
		$0
	});
}
endsnippet

# form.onSuccess = function
snippet fsucc
\$form->onSuccess[] = \$this->${1:form}${2:Succeeded};
$0
endsnippet

# form.onSuccess function
snippet succ
public function ${1:form}${2:Succeeded}(${2:\$form, \$values}) {
	$0
}
endsnippet

snippet fm
\$this->flashMessage('${1}', '${2:info}');$0
endsnippet


snippet n.re
Nette\\Application\\Responses
endsnippet

snippet n.ro
Nette\\Application\\Routers
endsnippet

snippet n.ui
Nette\\Application\\UI
endsnippet

snippet n.f
Nette\\Application\\UI\\Form
endsnippet

snippet n.c
Nette\\Caching
endsnippet

snippet n.d
Nette\\Database
endsnippet

snippet n.dc
Nette\\Database\\Context
endsnippet

snippet n.dt
Nette\\Database\\Table
endsnippet

snippet n.m
Nette\\Mail
endsnippet

snippet n.o
Nette\\Object
endsnippet

snippet n.so
Nette\\SmartObject
endsnippet

snippet n.sc
Nette\\StaticClass
endsnippet

snippet n.s
Nette\\Security
endsnippet

snippet n.u
Nette\\Utils
endsnippet

snippet n.p
Nette\\Utils\\Paginator
endsnippet

snippet t.d
Tracy\\Debugger
endsnippet

emulate sh -c '. ~/.config/sh/environ'
emulate sh -c '. ~/.config/sh/aliases'

# Bindkey ------------------------------------------------------------------{{{1

bindkey -e

[[ -e /etc/zinputrc ]] && . /etc/zinputrc

# Edit the command line in $EDITOR.
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

# Copy previous word.
bindkey '^[m' copy-prev-shell-word

# Completion ---------------------------------------------------------------{{{1

mkdir -p "$XDG_CACHE_HOME/zsh/completions"

fpath=(
    "$XDG_CONFIG_HOME/zsh/completions"
    "$XDG_CONFIG_HOME/zsh/completions"/*(/N)
    "$XDG_CACHE_HOME/zsh/completions"
    "$XDG_CACHE_HOME/zsh/completions"/*(/N)
    $fpath
)

# Initialize completion.
autoload -U compinit && compinit -d "$XDG_CACHE_HOME/zsh/zcompdump"

# Automatically load bash completion functions.
autoload -U +X bashcompinit && bashcompinit

# Load completion extensions.
zmodload zsh/complist

unsetopt MENU_COMPLETE  # Don't autoselect the first completion entry.
unsetopt FLOWCONTROL
setopt AUTO_MENU        # Show completion menu on tab press.
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END

# https://www.zsh.org/mla/workers/2022/msg00652.html
setopt CASE_GLOB

# See 'man zshparam'
ZLE_REMOVE_SUFFIX_CHARS=$' \t\n'

# Load colors support ('%F{red}' etc)
autoload -U colors && colors

# _extensions -- complete the glob '*.' with the extensions.
# _complete -- main completer.
zstyle ':completion:*' completer _extensions _complete

# Case insensitive completion.
zstyle ':completion:*' matcher-list \
    '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'

# Use caching so that commands like apt and dpkg complete are useable.
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh"

# Enable menu for completion.
zstyle ':completion:*' menu select

# Enable colors in completion menu.
eval "$(dircolors -b)"
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Expand '//' to '/'.
zstyle ':completion:*' squeeze-slashes true

# More info in 'kill' completion.
zstyle ':completion:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Shift-tab to cycle in reverse order.
bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete

# History ------------------------------------------------------------------{{{1

mkdir -p "$XDG_STATE_HOME/zsh"
export HISTFILE="$XDG_STATE_HOME/zsh/history"
export HISTSIZE=25000
export SAVEHIST=$HISTSIZE

setopt EXTENDED_HISTORY     # Record timestamp of command in HISTFILE.
setopt HIST_IGNORE_SPACE    # Ignore commands starting with a space.
setopt HIST_IGNORE_ALL_DUPS # Ignore duplicates
setopt HIST_SAVE_NO_DUPS    # Don't write duplicates.
setopt SHARE_HISTORY        # Share command history data.

# Cycle through history based on characters already typed.
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

bindkey '^p' up-line-or-beginning-search  # Alt+P
bindkey '^P' up-line-or-beginning-search  # Ctrl+P
[[ -n "$key[Up]" ]] && bindkey "$key[Up]" up-line-or-beginning-search

bindkey '^n' down-line-or-beginning-search  # Alt+N
bindkey '^N' down-line-or-beginning-search  # Ctrl+N
[[ -n "$key[Down]" ]] && bindkey "$key[Down]" down-line-or-beginning-search

# Kitty integration --------------------------------------------------------{{{1

if [[ -n $KITTY_INSTALLATION_DIR ]] ; then
    export KITTY_SHELL_INTEGRATION=enabled
    autoload -Uz -- "$KITTY_INSTALLATION_DIR/shell-integration/zsh/kitty-integration"
    kitty-integration
    unfunction kitty-integration
fi

# Plugins ------------------------------------------------------------------{{{1

typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[path]='none'
ZSH_HIGHLIGHT_STYLES[commandseparator]='fg=magenta'

function {
    local plugin
    for plugin ("$XDG_CONFIG_HOME"/zsh/plugins/*.zsh(N)) ; do
        [[ -e $plugin ]] && source "$plugin"
    done
}

eval "$(direnv hook zsh)"

eval "$(zoxide init zsh)"

# Prompt -------------------------------------------------------------------{{{1

if (( $+commands[starship] )) && [[ $TERM != linux ]] ; then
    eval "$(starship init zsh)"
else
    autoload -U colors && colors
    PROMPT='%B%F{blue}%~%f %F{white}%(#.#.$)%f%b '
    PROMPT2='%B%F{white}>%f%b '
    RPROMPT=''
fi

# Ranger -------------------------------------------------------------------{{{1

function ranger_cd {
    local temp_file=$(mktemp -t ranger_cd.XXXXXX)

    ranger --choosedir=$temp_file </dev/tty >/dev/tty

    local chosen_dir=$(cat -- "$temp_file")
    if [[ -n $chosen_dir && $chosen_dir != $PWD ]] ; then
        cd -- "$chosen_dir"
    fi
    rm -f -- "$temp_file"

    local fn
    for fn (chpwd $chpwd_functions precmd $precmd_functions); do
        (( $+functions[$fn] )) && $fn
    done
    zle && zle reset-prompt
}

zle -N ranger_cd

# ranger-cd will fire for Ctrl+O
bindkey '^O' ranger_cd

# Sudo ---------------------------------------------------------------------{{{1

function toggle_sudo {
    if [[ $BUFFER = '' ]] ; then
        BUFFER='sudo !!'
        CURSOR=$#BUFFER
    elif [[ $BUFFER = 'sudo !!' ]] ; then
        BUFFER=''
        CURSOR=0
    elif [[ $BUFFER =~ '^sudo ' ]]; then
        BUFFER="${BUFFER#sudo }"
        CURSOR=$(($CURSOR - 5))
    else
        BUFFER="sudo $BUFFER"
        CURSOR=$(($CURSOR + 5))
    fi
}

zle -N toggle_sudo

# Toggle sudo with Esc+Esc.
bindkey '\e\e' toggle_sudo
